<?php

include_once('answers.features.inc');

/**
 * Implement hook_help().
 */
function answers_help($path, $arg) {
  switch ($path) {
    case "admin/help#modulename":
      return '<p>'. t('Enables users to ask questions and for other users to answer them.') .'</p>';
  }
}

/*
 * Implementation of hook_menu().
 */
function answers_menu($may_cache=NULL) {
    $nid = (int)arg(1);
    global $user;

    $items['admin/settings/answers'] = array(
        'title'              => 'Answers',
        'page callback'      => 'drupal_get_form',
        'page arguments'     => array('answers_settings'),
        'access arguments'   => array('administer content types'),
        'type'               => MENU_NORMAL_ITEM
    );

    return $items;
}

function answers_settings() {

  $form['answers_notification'] = array(
    '#type' => 'fieldset',
    '#description' => t('Settings for the email which is sent to notify a question asker when a new answer is posted (if the asker asks for notification).'),
    '#title' => t('Notification Email Settings'),
  );

  $form['answers_notification']['answers_answer_notification_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject line'),
    '#default_value' => variable_get('answers_answer_notification_subject', ''),
    '#description' => t('Dynamic variables available: !question_user_name, !answer_user_name, !question_title, !question_url, and !site'),
    '#required' => TRUE
  );


  $form['answers_notification']['answers_answer_notification_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('answers_answer_notification_body', ''),
    '#description' => t('Dynamic variables available: !question_user_name, !answer_user_name, !question_title, !question_url, and !site.'),
    '#required' => TRUE
  );

  return system_settings_form($form);

}

/*
 * Implement hook_nodeapi. 
 * Tasks:
 *   - When a new answer is posted, notify the question author if appropriate.
 *   - When a question is deleted, delete the answer associated with it
 */
function answers_nodeapi(&$node, $op, $teaser) {
  global $user;

  switch ($op) {

    case 'view':
      if ($node->type == 'question') {

        // Ensure that the 'Post an Answer' link only shows if the question is not locked
        // The logic is a little complicated below to avoid updating the field when not necessary
        // The field should have the *opposite* value of the node->locked field
        $field = content_fields('field_answer_question', 'answer');
        $locked_p = $node->field_question_locked_p[0]['value'];
       if ($locked_p == $field['widget']['node_link']['full']) {
          module_load_include('inc', 'content', 'includes/content.crud');
          $field['widget']['node_link']['full'] = $locked_p ? +0 : +1;
		  content_field_instance_update($field);
        }
      }
      break;
	  
    case 'insert':                        
      if ($node->type == 'answer') {
        $question_id = $node->field_answer_question[0]['nid']; // extract the nid of the question
        if ($question_id) {
          answers_notify($question_id);
        }
      }
      break;

    case 'delete':
      if ($node->type == 'question') {
        $answer_nids = _answers_question_answers($node);
        foreach($answer_nids as $answer_nid) {
          node_delete($answer_nid);
        }
      }
      break;

  }
}

/*
 * answers_nids 
 * 
 * Input: $question: a question node or nid
 * Returns: List of answer nids
 *
 */
function _answers_question_answers($question) {

  $results = array();
  $qid = is_object($question) ? $question->nid : $question;
  
  // Use views as a query engine
  $view = views_get_view('question_answers');
  $view->set_arguments(array($qid));
  $view->execute();
  
  foreach ($view->result as $result) {
    $nid = $result->nid;
    $results[$nid] = $nid;
  }

  return $results;
}

 /*
 * If the question author should be notified, do so
 */
function answers_notify($nid) {
  
  global $user;
  
  $question = node_load($nid);
  $notify_p = $question->field_notify_p[0]['value']; // extract the nid of the question

  if ($notify_p) {
  
    $question_user = user_load($question->uid);

    $params = array(
      '!question_user_name'  => $question_user->name, 
      '!answer_user_name'    => $user->uid == 0 ? 'anonymous' : $user->name, 
      '!question_title'      => $question->title, 
      '!question_url'        => url('node/'. $nid, array('absolute' => TRUE, 'target' => '_blank')),
      '!site'                => variable_get('site_name', 'drupal'),
      );

    $subject_template = variable_get('answers_answer_notification_subject', '');
    $subject = t($subject_template, $params);

    $body_template = variable_get('answers_answer_notification_body', '');
    $body = t($body_template, $params);

    $headers['Mime-Version'] = '1.0';
    $headers['Content-Type'] = "text/html";
 
    $message = array(
      'headers' => $headers,
      'to'      => $question_user->mail,
      'from'    => variable_get('site_mail', ini_get('sendmail_from')),
      'subject' => $subject,
      'body'    => $body,
      );

    drupal_mail_send($message);

  };
}

/*
 * Implement hook_form_alter
 *
 * If user is anonymous, hide the field allowing him/her to ask to be notified by email
 * This is a somewhat arduous way to do that based on http://drupal.org/node/208046
 */
function answers_form_alter(&$form, $form_state, $form_id) {
  global $user;

  switch ($form_id) {

    case 'question_node_form':

      // Change the name of the submit button
      $form['buttons']['submit']['#value'] = t('Ask Your Question');		  

      // insert a predefined question title if one has been set in the path
      $title = check_plain($_GET['title']);
      if ($title) {
        drupal_set_title(t('Add some details to your question'));
        $form['title']['#default_value'] = $title;
      }

      // Hide the option to get notifications by email if the user is anonymous
      if ($form_id == 'question_node_form' && $user->uid == 0) { 
        $form['field_notify_p'][0]['#default_value']['value'] = 0;
        $form['field_notify_p']['#prefix'] = '<div style="display: none;">';
        $form['field_notify_p']['#suffix'] = '</div>';
      }

      // Hide 'field_question_locked_p' (this is only used behind the scenes, not directly set by users)

      $form['field_question_locked_p']['#prefix'] = '<div style="display: none;">';
      $form['field_question_locked_p']['#suffix'] = '</div>';

	  break;

    case 'views_exposed_form':
 
      if ($form['#id'] = 'views-exposed-form-all-questions-page-4') {

        // Delete the title from the search box
        $form['#info']['filter-keys']['label'] = '';

        // Change the length & description of the search box
        $form['keys']['#title'] = 'Question';
        $form['keys']['#size'] = 80;
        $form['keys']['#attributes']['title'] = t('Enter your question');

        // Change the title of the standard search button
        $form['submit']['#value'] = t('Search');

      }		  
      break;

  }
}

